version: "3.5"
networks:
  default:
    name: kafka_dev_default
    external: true

volumes:
  zk-data: {}
  zk-logs: {}
  kf-data: {}
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
#    volumes:
#      - zk-data:/var/lib/zookeeper/data
#      - zk-logs:/var/lib/zookeeper/log

  broker:
    image: confluentinc/cp-kafka:7.3.1
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#    volumes:
#      - kf-data:/var/lib/kafka/data

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "broker:29092"
      SCHEMA_REGISTRY_SCHEMA_COMPATIBILITY_LEVEL: "full_transitive"
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: "GET,POST,PUT,OPTIONS"
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: "*"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 10s
      timeout: 10s
      retries: 6

  debezium-connector:
    image: debezium/connect:1.7.0.Final
    # build:
    #   context: .
    #   dockerfile:  Dockerfile
    hostname: debezium-connector
    container_name: debezium-connector
    depends_on:
      - broker
      - zookeeper
      - schema-registry
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://debezium-connector:8083" ]
      timeout: 2m
      interval: 10s
      retries: 10
    ports:
      - "8083:8083"
    environment:
      CONNECT_CUB_KAFKA_TIMEOUT: 300
      BOOTSTRAP_SERVERS: "broker:29092"
      CONNECT_BOOTSTRAP_SERVERS: "broker:29092"
      CONNECT_REST_ADVERTISED_HOST_NAME: 'debezium-connector'
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect-group-01-v04
      CONFIG_STORAGE_TOPIC: kafka-connect-configuration-topic
      OFFSET_STORAGE_TOPIC: kafka-connect-connector-offset-topic
      CONNECT_CONFIG_STORAGE_TOPIC: _kafka-connect-group-01-v04-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _kafka-connect-group-01-v04-offsets
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_STATUS_STORAGE_TOPIC: _kafka-connect-group-01-v04-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_CONFIG_PROVIDERS: "secretsmanager"
      CONNECT_CONFIG_PROVIDERS_SECRETSMANAGER_CLASS: "com.urbancompass.kafka.outbox.provider.KafkaConnectSecretsManagerConfigProvider"

  kowl-ui:
    image: quay.io/cloudhut/kowl:latest
    hostname: kowl
    container_name: kowl
    depends_on:
      schema-registry:
        condition: service_healthy
    ports:
      - "8000:8080"
    environment:
      KAFKA_BROKERS: 'broker:29092'
      KAFKA_SCHEMAREGISTRY_ENABLED: 'true'
      KAFKA_SCHEMAREGISTRY_URLS: "http://schema-registry:8081"
      CONNECT_ENABLED: 'true'
      CONNECT_CLUSTERS_NAME: 'debezium'
      CONNECT_CLUSTERS_URL: "http://debezium-connector:8083"
